#-----------------------------------------------
# 1. ServiceAccount
#-----------------------------------------------
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: monitoring
  name: telegraf-ds
  labels:
    app.kubernetes.io/name: telegraf-ds

---
#-----------------------------------------------
# 2. ClusterRole
#-----------------------------------------------
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  namespace: monitoring
  name: influx-stats-viewer
  labels:
    app.kubernetes.io/name: telegraf-ds
rules:
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["nodes/proxy", "nodes/stats"]
    verbs: ["get", "list", "watch"]
---
#-----------------------------------------------
# 3. ClusterRoleBinding
#-----------------------------------------------
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  namespace: monitoring
  name: influx-telegraf-viewer
  labels:
    app.kubernetes.io/name: telegraf-ds
subjects:
  - kind: ServiceAccount
    name: telegraf-ds 
    namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influx-stats-viewer

---
#-----------------------------------------------
# 4. ConfigMap
#-----------------------------------------------
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: monitoring
  name: telegraf-ds
  labels:
    app.kubernetes.io/name: telegraf-ds
data:
  telegraf.conf: |+

    [agent]
      collection_jitter = "0s"
      debug = false
      flush_interval = "10s"
      flush_jitter = "0s"
      hostname = "ubuntu"
      interval = "10s"
      logfile = ""
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      omit_hostname = false
      precision = ""
      quiet = false
      round_interval = true


    [[outputs.kafka]]
      # URLs of kafka brokers
      brokers = ["kafka1:19091","kafka2:19092","kafka3:19093"] # EDIT THIS LINE
      # Kafka topic for producer messages
      topic = "telegraf-kr1-metric" 
      # topic = "test"
      client_id = "golangsarama__1.18.0__serverinfra__telegraf"
      routing_tag = "host"
      version = "0.11.0.2"
      compression_codec = 2
      required_acks = 1
      data_format = "json"

    [[inputs.diskio]]
    [[inputs.kernel]]
    [[inputs.mem]]
    [[inputs.net]]
    [[inputs.processes]]
    [[inputs.swap]]
    [[inputs.system]]

    [[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false

    [[inputs.disk]]
    ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"]

    [[inputs.docker]]
    endpoint = "unix:///var/run/docker.sock"

    # [[inputs.kubernetes]]
    # url = "https://127.0.0.1:10250"
    # bearer_token = "/run/secrets/kubernetes.io/serviceaccount/token"
    # insecure_skip_verify = true
---
#-----------------------------------------------
# 5. DaemonSet
#-----------------------------------------------
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: telegraf-ds
  namespace: monitoring
  labels:
    app.kubernetes.io/name: telegraf-ds
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: telegraf-ds
  template:
    metadata:
      labels:
        app.kubernetes.io/name: telegraf-ds
    spec:
      serviceAccountName: telegraf-ds
      containers:
      - name: telegraf-ds
        image: telegraf:1.20.2
        imagePullPolicy: "IfNotPresent"
        resources:
          limits:
            cpu: 1
            memory: 2Gi
          requests:
            cpu: 0.1
            memory: 256Mi
        env:
        - name: HOSTIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: HOSTIP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: HOST_PROC
          value: /hostfs/proc
        - name: HOST_SYS
          value: /hostfs/sys
        - name: HOST_MOUNT_PREFIX
          value: /hostfs
        volumeMounts:
        - name: varrunutmpro
          mountPath: /var/run/utmp
          readOnly: true
        - name: hostfsro
          mountPath: /hostfs
          readOnly: true
        - name: docker-socket
          mountPath: /var/run/docker.sock
        - name: config
          mountPath: /etc/telegraf
      volumes:
      - name: hostfsro
        hostPath:
          path: /
      - name: docker-socket
        hostPath:
          path: /var/run/docker.sock
      - name: varrunutmpro
        hostPath:
          path: /var/run/utmp
      - name: config
        configMap:
          name:  telegraf-ds
